name: Date Range API Secret Sacn to Create Issue
on:
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Enter Start date to process the Secret Scan Alerts'
        required: true
        default: 'November 7, 2023 00:00:00'
      end_date:
        description: 'Enter End date to process the Secret Scan Alerts'
        required: true
        default: 'November 9, 2023 23:59:59'
jobs:
  create-issue:
    runs-on: ubuntu-latest    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2    
    - name: Extract Deliveries for Secret Scan Alerts & Create Issues
      id: extract-delivery-create-issue
      env:
        I_URL: "https://api.github.com/repos/EIDIKO/secret-pub-repo/issues/249"
      run: |
        TOKEN="${{ secrets.MY_PAT }}"
        BASE_URL="https://api.github.com"
        API_URL="$BASE_URL/orgs/${{ github.repository_owner }}/secret-scanning/alerts?per_page=100&page=1&state=open"
        SCA_API_RESPONSE=$(curl -s -i -X GET -u "$TOKEN" "$API_URL")
        HEADERS=$(echo "$SCA_API_RESPONSE" | awk -v RS='\r\n\r\n' 'NR==1')
        HTTP_STATUS=$(echo "$HEADERS" | head -n 1 | awk '{print $2}')
        LINK_HEADER=$(echo "$HEADERS" | grep -i "link:" | awk -F': ' '{print $2}')
        REL=$(echo "$LINK_HEADER" | sed -n 's/.*rel="\([^"]*\)".*/\1/p')
        NEXT_URL=$(echo "$LINK_HEADER" | sed -n 's/<\([^>]*\)>;.*/\1/p')
        SCAs=$(echo "$SCA_API_RESPONSE" | awk -v RS='\r\n\r\n' 'NR==2')
        echo "Status: $HTTP_STATUS"
        #echo "LINK: $LINK_HEADER"
        echo "FIRST_URL: $NEXT_URL"
        echo "FIRST_REL: $REL"
        IFS=',' read -ra URL_ARRAY <<< "$LINK_HEADER"
        SECOND_URL="${URL_ARRAY[1]}"
        SECOND_URL=$(echo "$SECOND_URL" | awk -F'<' '{print $2}' | awk -F'>' '{print $1}')
        echo "SECOND_URL: $SECOND_URL"
        BREAK_FLAG="DONT_BREAK"
        

        if [ -z "$LINK_HEADER" ]; then
            echo "LINK_HEADER is null or empty"
          else
            echo "LINK_HEADER is not null or empty and is: $LINK_HEADER"
        fi
        
        if [ -z "$NEXT_URL" ]; then
            echo "NEXT_URL is null or empty"
          else
            echo "NEXT_URL is not null or empty and is: $NEXT_URL"
        fi
        
        if [ -z "$SECOND_URL" ]; then
            echo "SECOND_URL is null or empty"
            PAGE_VALUE="1"
          else
            echo "SECOND_URL is not null or empty and is: $SECOND_URL"
            PAGE_VALUE=$(echo "$SECOND_URL" | awk -F'&page=' '{print $2}' | awk -F'&' '{print $1}')
        fi
        
        
        if [ "$HTTP_STATUS" != "200" ]; then
          echo "No deliveries found or error in API response, exiting smoothly"
          echo $SCAs
          exit 0
        fi

        ISSUE_DATA="|ISSUE_NUMBER|ISSUE_URL|ISSUE_TITLE|ASS_LOGIN|ASS_TYPE|\n"
        COMMENT_BODY_MD="|ISSUE_NUMBER|ISSUE_URL|ISSUE_TITLE|ASS_LOGIN|ASS_TYPE|\n|------------|---------|-----------|---------|--------|\n"
        COMMENT_BODY_ISSUES="|ALERT_STATUS|ALERT_COUNT|ISSUES_TO_CREATE|SKIPPED_ISSUES|\n|------------|---------|------------|------------|\n|OPEN|ISSUE_COUNT_VAL|3DAYS_OLD_VAL|7DAYS_OLD_VAL|"
        ISSUE_COUNT=0
        ISSUE_COUNT_3D_OLD=0
        ISSUE_COUNT_7D_OLD=0


        echo "Page Value: $PAGE_VALUE"

        # Convert PAGE_VALUE to an integer
        PAGE_VALUE=$((PAGE_VALUE))

        # Use a for loop to run a block of code n times (where n is PAGE_VALUE)
        for ((i = PAGE_VALUE; i >= 1; i--)); do
          echo "Running code for iteration $i"
          # Insert your code to be executed in each iteration here
          API_URL="$BASE_URL/orgs/${{ github.repository_owner }}/secret-scanning/alerts?per_page=100&page=$i&state=open"
          echo "API_URL: $API_URL"
          SCA_API_RESPONSE=$(curl -s -i -X GET -u "$TOKEN" "$API_URL")
          SCAs=$(echo "$SCA_API_RESPONSE" | awk -v RS='\r\n\r\n' 'NR==2')
          echo "Sort the array of JSON objects in ascending order based on the created_at"
          #SCA_DELIVERIES=$(echo "$SCAs" | jq 'sort_by(.created_at)')
          SCA_DELIVERIES=$(echo "$SCAs" | jq 'sort_by(.created_at) | reverse')
          echo "SCA Deliveries $SCA_DELIVERIES"
          for SCA in $(echo "${SCAs}" | jq -r '.[] | @base64'); do
              _jq() {
                echo "${SCA}" | base64 --decode | jq -r "${1}"
              }
              echo "++++++++++++++++++++++++++++++++++"
              SAC_ALERT=$(_jq '.html_url')
              let "ISSUE_COUNT+=1"
              
              
              
              CREATED_AT=$(_jq '.created_at')
              START_DATE_TIMESTAMP=$(date -d '${{ github.event.inputs.start_date }}' --rfc-3339=seconds)
              OLDEST_ALLOWED_TIMESTAMP=$(date -d '${{ github.event.inputs.end_date }}' --rfc-3339=seconds)
              
              
              if [ "$CREATED_AT" \< "$START_DATE_TIMESTAMP" ]; then
                echo "In SCAlert $SAC_ALERT, CD is $CREATED_AT  older than SD $START_DATE_TIMESTAMP. Skipping further process."
                echo "Skipping present iteration & continue"
                let "ISSUE_COUNT_7D_OLD+=1"                
                continue
              fi


              
              if [ "$CREATED_AT" \> "$OLDEST_ALLOWED_TIMESTAMP" ]; then
                echo "SCAlert $SAC_ALERT is older than $OLDEST_ALLOWED_TIMESTAMP. Skipping further process."
                echo "Exiting workflow as remaining SCAs are also newer"
                BREAK_FLAG="BREAK"
                break
              fi
              echo "SCAlert $SAC_ALERT is older than $OLDEST_ALLOWED_TIMESTAMP"
              SECRET=$(_jq '.secret_type')
              HTML_URL=$(_jq '.html_url')
              ALERT_NUMBER=$(_jq '.number')
              LOCATIONS_URL=$(_jq '.locations_url')
              REPO_NAME=$(_jq '.repository.name')
              FULL_REPO_NAME=$(_jq '.repository.full_name')
              echo $SECRET
              echo $LOCATIONS_URL
              echo $FULL_REPO_NAME
              echo $HTML_URL
              echo $REPO_NAME
              echo $ALERT_NUMBER
              # Get Locations using API
              LOCATIONS=$(curl -s -X GET -u "$TOKEN" "$LOCATIONS_URL")
              echo $LOCATIONS
              COMMIT_URL=$(echo $LOCATIONS | jq -r '.[0].details.commit_url')
              echo $COMMIT_URL
              # Get Commiter details using API
              COMMITS=$(curl -s -X GET -u "$TOKEN" "$COMMIT_URL")
              #echo $COMMITS
              # Get Auther Email using API
              AUTH_EMAIL=$(echo $COMMITS | jq -r '.author.email')          
              if [[ "$AUTH_EMAIL" == *users.noreply.github.com* ]]; then
                login_user=$(echo "$AUTH_EMAIL" | cut -d'+' -f2 | cut -d'@' -f1)
                echo $login_user
              else
                echo $AUTH_EMAIL
                COMMITS_AUTH_DETAILS=$(curl -s -X GET -u "$TOKEN" "$BASE_URL/search/commits?q=author-email:$AUTH_EMAIL")
                #echo $COMMITS_AUTH_DETAILS
                # Get Auther Username using API
                login_user=$(echo $COMMITS_AUTH_DETAILS | jq -r '.items[0].author.login')
              fi
              let "ISSUE_COUNT_3D_OLD+=1"
              echo $login_user            
              ISSUE_RESPONSE=$(curl -X POST -u "$TOKEN" -d "{\"title\":\"$SECRET\",\"body\":\"$HTML_URL\",\"assignees\":[\"$login_user\"]}" "$BASE_URL/repos/$FULL_REPO_NAME/issues")
              echo "GitHub Issue Creation Response: $ISSUE_RESPONSE"
              ISSUE_URL=$(echo $ISSUE_RESPONSE | jq -r '.html_url') 
              ISSUE_NUMBER=$(echo $ISSUE_RESPONSE | jq -r '.number') 
              REPO_URL=$(echo $ISSUE_RESPONSE | jq -r '.repository_url') 
              ISSUE_TITLE=$(echo $ISSUE_RESPONSE | jq -r '.title') 
              ASS_LOGIN=$(echo $ISSUE_RESPONSE | jq -r '.assignee.login') 
              ASS_TYPE=$(echo $ISSUE_RESPONSE | jq -r '.assignee.type')
              issue_data="${ISSUE_DATA//ISSUE_NUMBER/$REPO_URL#$ISSUE_NUMBER}"
              issue_data="${issue_data//ISSUE_URL/$ISSUE_URL}"
              issue_data="${issue_data//ISSUE_TITLE/$ISSUE_TITLE}"
              issue_data="${issue_data//ASS_LOGIN/$ASS_LOGIN}"
              issue_data="${issue_data//ASS_TYPE/$ASS_TYPE}"
              COMMENT_BODY_MD="$COMMENT_BODY_MD$issue_data"
              echo "++++++++++++++++++++++++++++++++++"         
          done
          if [ "$BREAK_FLAG" == "BREAK" ]; then
            echo "Breaking External For loop"
            break
          fi
        done
        COMMENT_BODY_ISSUES="${COMMENT_BODY_ISSUES//ISSUE_COUNT_VAL/$ISSUE_COUNT}"
        COMMENT_BODY_ISSUES="${COMMENT_BODY_ISSUES//3DAYS_OLD_VAL/$ISSUE_COUNT_3D_OLD}"
        COMMENT_BODY_ISSUES="${COMMENT_BODY_ISSUES//7DAYS_OLD_VAL/$ISSUE_COUNT_7D_OLD}"
        curl -X POST \
              -u "$TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "$I_URL/comments" \
               -d '{
                    "body": "'"$COMMENT_BODY_ISSUES"'"
                }'
        curl -X POST \
               -u "$TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "$I_URL/comments" \
               -d '{
                    "body": "'"$COMMENT_BODY_MD"'"
                }'
    - name: Issue Created
      if: success()
      run: echo "GitHub issue created successfully."
