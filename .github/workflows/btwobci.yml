name: BCI
on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
permissions: read-all
jobs:
  MapTest-Identify:
    runs-on: ubuntu-latest
    outputs:
      basefile: ${{ steps.getprfilename.outputs.basefile }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install requests modules
        run: pip install requests
      - name: Get PR File Name
        id: getprfilename
        env:
          TOKEN: ${{ secrets.MY_PAT }}   
          REPO_NAME: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          P_NUMBER: ${{ github.event.pull_request.number }}
          TT: ${{ secrets.GITHUB_TOKEN }}
        shell: python        
        run: |
          import base64
          import json
          import os
          import requests
          REPO_NAME = os.environ["REPO_NAME"]
          P_NUMBER = os.environ["P_NUMBER"]
          TOKEN = os.environ["TOKEN"]
          print("Value of REPO_NAME: " + REPO_NAME)
          print("Value of P_NUMBER: " + P_NUMBER)
          print("Value of TOKEN: " + TOKEN)
          url= "https://api.github.com/repos/"+REPO_NAME+"/pulls/"+P_NUMBER+"/files"
          print("Formated URL" + url)
          response = requests.get(url)
          if response.status_code == 200:
            data = response.json()
            filename = data[0].get("filename", "No filename found")
            print('Filename:', filename)
            filename_without_extension = filename.split("/")[-1].split(".")[0]
            print('filename_without_extension:', filename_without_extension)
            #print(f"::set-output name=basefile::"+filename_without_extension)
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh: 
                  fh.write(f"basefile={filename_without_extension}")
          else:
            print('Request failed with status code:', response.status_code)
            filename = "Request failed"

  MapTest-Check:
    needs: [MapTest-Identify]
    runs-on: ubuntu-latest
    steps:
      - name: Check Modified File
        id: copyfiles
        run: |
          echo "BASEFILE-Needs: ${{ needs.MapTest-Identify.outputs.basefile }}"
  MapTest-Create:
    needs: [MapTest-Identify]
    runs-on: self-hosted
    steps:
      - name: CreateInitparms
        run: |
          echo ${{ needs.MapTest-Identify.outputs.basefile }}
          ssh uskm1u04@usaws3601.us.kellogg.com 'echo "<mapname>${{needs.MapTest-Identify.outputs.basefile}}</mapname>" > /home/uskm1u04/maptest/initparms'
          
      # Copy map into APP server
      - name: Copy Map from Repo to App Server
        run: |
          echo ${{ needs.MapTest-Identify.outputs.basefile }}
          echo $GITHUB_WORKSPACE
          scp $GITHUB_WORKSPACE/maps/${{needs.MapTest-Identify.outputs.basefile}}* uskm1u04@usaws3601.us.kellogg.com:/home/uskm1u04/maps
          #ssh uskm1u04@usaws3601.us.kellogg.com 'cp $GITHUB_WORKSPACE/maps/${{needs.MapTest-Identify.outputs.basefile}}/* /home/uskm1u04/maps
      # Manual Validation for test
      # when component.diffs file is zero bytes, test is good
      # When difference file size is bigger than 0, trigger a manual valudation
      - name: Manual Validation for test
        run: |
          # Get the size of the file
          file_size=$(ssh uskm1u04@usaws3601.us.kellogg.com 'stat -c "%s" /home/uskm1u04/maptest/diffs/${{needs.MapTest-Identify.outputs.basefile}}.diffs')
          # Check if the file size is zero
          if [[ "$file_size" -eq 0 ]]; then
            # The file is zero bytes
            echo "The file is zero bytes."
            exit 0
          else
            # The file is not zero bytes
            echo "The file is not zero bytes."
            echo "There are differences on Github components, check ${{needs.MapTest-Identify.outputs.basefile}}.diffs" | mail -s "B2Bi Test Result Mismatch" "mario.urbina@kellanova.com"
          fi
